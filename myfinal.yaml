AWSTemplateFormatVersion: 2010-09-09
Description: >
  This template deploys a VPC, with a pair of public and private
  subnets spread across two Availability Zones. It deploys an internet gateway, with a default route on the public subnets. 
  It deploys a pair of NAT gateways (one in each AZ),
  and default routes for them in the private subnets. Or CloudFormation Template for creating VPC with ALB and Auto Scaling Group.
Parameters:
  InstanceTypeMumu:
    Type: String
    Default: t2.micro
    AllowedValues:
      - "t2.micro"
      - "t3.micro"
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: Mukhtasar
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.10.0.0/16
  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in
      the first Availability Zone
    Type: String
    Default: 10.10.1.0/24
  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in
      the second Availability Zone
    Type: String
    Default: 10.10.2.0/24
  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in
      the first Availability Zone
    Type: String
    Default: 10.10.4.0/24
  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in
      the second Availability Zone
    Type: String
    Default: 10.10.5.0/24
  TypeELB:
    Type: String
    AllowedValues:
      - application
      - network
      - gateway
    Default: application  

Mappings:
  AmiMapping:
    us-east-1:
      AmiId: ami-0c101f26f147fa7fd # North Virginia
    us-west-1:
      AmiId: ami-019f9b3318b7155c5 # Ohio
    us-west-2: 
      AmiId: ami-0a70b9d193ae8a799  # Oregon

Resources: 
# My VPC: Creates a VPC
  MyVPC1:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      Tags:
        - Key: Owner
          Value: !Ref EnvironmentName

  #MySecurityGroup: Defines a security group for instances.
  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      #SecurityName: 
      GroupName: MySecurityGroup
      GroupDescription: Security Group
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId: !Ref MyVPC1
      Tags:
        - Key: Owner
          Value: !Ref EnvironmentName 
# Setting up an internet gateway.
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Owner
          Value: !Ref EnvironmentName

 # Here attached the internet gateway to the VPC.      
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC1
      InternetGatewayId: !Ref InternetGateway

  #Creating public subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC1
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: Owner
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC1
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: Owner
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

   #Configures public route table and default route.
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC1
      Tags:
        - Key: Owner
          Value: !Sub ${EnvironmentName} Public Routes


  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  #Associating public subnets with the route table
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC1
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: "false"
      Tags:
        - Key: Owner
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC1
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR  
      MapPublicIpOnLaunch: "false"  
      Tags:
        - Key: Owner
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  #Configures a private route table and sets up a default route to NAT gateway for private subnets.
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC1
      Tags:
        - Key: Name
          Value: ${EnvironmentName} Public Routes (AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  #Setting up NAT gateway and elastic IP for the first public subnet.
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    DependsOn: NatGateway1EIP
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  #It associates private subnets with the private route table.
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet2  

  

  #Security group for ALB.
  MyALB1SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access
      VpcId: !Ref MyVPC1
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0
  # Creates an Application Load Balancer that distributes incoming application traffic across multiple targets, such as EC2 instances.   
  MyALB1:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MyALB1
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref MyALB1SecurityGroup
      Tags:
        - Key: Owner
          Value: !Ref EnvironmentName  

  #Configures a listener for the ALB to process incoming connections.
  MyALB1Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:  !Ref MyTargetGroup
      LoadBalancerArn: !Ref MyALB1
      Port: 80
      Protocol: HTTP
  
   #It defines a launch template that specifies the configuration of instances launched by the Auto Scaling Group.
  MyLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: MumuMyLaunchTemplate
      LaunchTemplateData:
        DisableApiTermination: "true"
        ImageId: !FindInMap [ AmiMapping, !Ref "AWS::Region", AmiId ]
        InstanceType: !Ref InstanceTypeMumu  
        SecurityGroupIds:
        - !GetAtt MySecurityGroup.GroupId
        UserData: 
         Fn::Base64: !Sub |
          #!/bin/bash
          yum -y update
          yum install httpd -y
          systemctl enable httpd
          echo  "<h1> hostname is $HOSTNAME </h1>" > /var/www/html/index.html
          systemctl start httpd
          sudo service httpd start
 
      TagSpecifications:
        - ResourceType: launch-template
          Tags:
            - Key: Owner
              Value: !Ref EnvironmentName   

  #Creating a target group for the ALB to route requests to registered targets.             
  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: MyTargetGroup
      VpcId: !Ref MyVPC1
      Port: 80
      Protocol: HTTP
      TargetType: instance
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      Matcher:
        HttpCode: 200
      Tags:
        - Key: Owner
          Value: !Ref EnvironmentName

  
  #Setting up an Auto Scaling Group that automatically adjusts the number of EC2 instances based on demand 
  MyAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: MyAutoScalingGroup
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      LaunchTemplate:
        LaunchTemplateName:  MumuMyLaunchTemplate
        Version: !GetAtt MyLaunchTemplate.LatestVersionNumber 
      MinSize: '1'  
      MaxSize: '3'
      DesiredCapacity: '2'
      TargetGroupARNs:
        - !GetAtt MyTargetGroup.TargetGroupArn
      Tags: 
        - Key: Owner
          Value: !Ref EnvironmentName
          PropagateAtLaunch: "true"
        - Key: Name
          Value: Mumu
          PropagateAtLaunch: "true"
  

Outputs:
   #Here we provide the DNS link of the Application Load Balancer for accessing the application.
  ELBDNSLink:
    Description: DNS link of the Application Load Balancer
    Value: !GetAtt MyALB1.DNSName
  # VPC:
  #   Description: A reference to the created VPC
  #   Value: !Ref MyVPC1
  # PublicSubnets:
  #   Description: A list of the public subnets
  #   Value: !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2]]
  # PrivateSubnets:
  #   Description: A list of the private subnets
  #   Value: !Join [",", [!Ref PrivateSubnet1, !Ref PrivateSubnet2]]
  # PublicSubnet1:
  #   Description: A reference to the public subnet in the 1st Availability Zone
  #   Value: !Ref PublicSubnet1
  # PublicSubnet2:
  #   Description: A reference to the public subnet in the 2nd Availability Zone
  #   Value: !Ref PublicSubnet2
  # PrivateSubnet1:
  #   Description: A reference to the private subnet in the 1st Availability Zone
  #   Value: !Ref PrivateSubnet1
  # PrivateSubnet2:
  #   Description: A reference to the private subnet in the 2nd Availability Zone
  #   Value: !Ref PrivateSubnet2
  # NoIngressSecurityGroup:
  #   Description: Security group with no ingress rule
  #   Value: !Ref MySecurityGroup
